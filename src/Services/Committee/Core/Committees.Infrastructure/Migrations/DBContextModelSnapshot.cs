// <auto-generated />
using System;
using Committees.Infrastructure.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Committees.Infrastructure.Migrations
{
    [DbContext(typeof(DBContext))]
    partial class DBContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.13")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("CommitteeInternalMember", b =>
                {
                    b.Property<Guid>("CommitteesId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("InternalMembersUserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("CommitteesId", "InternalMembersUserId");

                    b.HasIndex("InternalMembersUserId");

                    b.ToTable("CommitteeInternalMember", (string)null);
                });

            modelBuilder.Entity("Committees.Domain.Models.CommitteeAttachment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CommitteeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Path")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<int>("State")
                        .HasColumnType("int");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CommitteeId");

                    b.ToTable("CommitteeAttachments", (string)null);
                });

            modelBuilder.Entity("Committees.Domain.Models.InternalMember", b =>
                {
                    b.Property<Guid>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("PermissionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<int>("State")
                        .HasColumnType("int");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("UserId");

                    b.HasIndex("PermissionId");

                    b.ToTable("InternalMembers", (string)null);
                });

            modelBuilder.Entity("Committees.Domain.Models.InternalMemberMeeting", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("InternalMemberId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("MeetingId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<int>("State")
                        .HasColumnType("int");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("InternalMemberId");

                    b.HasIndex("MeetingId");

                    b.ToTable("InternalMemberMeetings", (string)null);
                });

            modelBuilder.Entity("Committees.Domain.Models.InternalMemberProceeding", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("InternalMemberId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ProceedingId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<int>("State")
                        .HasColumnType("int");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("InternalMemberId");

                    b.HasIndex("ProceedingId");

                    b.ToTable("InternalMemberProceedings", (string)null);
                });

            modelBuilder.Entity("Committees.Domain.Models.Output", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CommitteeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Details")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("OutputTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<int>("State")
                        .HasColumnType("int");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CommitteeId");

                    b.HasIndex("OutputTypeId");

                    b.ToTable("Outputs", (string)null);
                });

            modelBuilder.Entity("Committees.Domain.Models.OutputAttachment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("OutputId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Path")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<int>("State")
                        .HasColumnType("int");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("OutputId");

                    b.ToTable("OutputAttachments", (string)null);
                });

            modelBuilder.Entity("Committees.Domain.Models.OutputType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CSSClasses")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NameAr")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NameEn")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<int>("State")
                        .HasColumnType("int");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("OutputTypes", (string)null);
                });

            modelBuilder.Entity("Committees.Domain.Models.Permission", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CSSClasses")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NameAr")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NameEn")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<int>("State")
                        .HasColumnType("int");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Permissions", (string)null);
                });

            modelBuilder.Entity("Committees.Domain.Models.Target", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CommitteeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Goal")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<int>("State")
                        .HasColumnType("int");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CommitteeId");

                    b.ToTable("Targets", (string)null);
                });

            modelBuilder.Entity("Committees.Domain.Models.WorkRule", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CommitteeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Path")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<int>("State")
                        .HasColumnType("int");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CommitteeId");

                    b.ToTable("WorkRules", (string)null);
                });

            modelBuilder.Entity("Committees.Models.Committee", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("CommitteeTime")
                        .HasColumnType("int");

                    b.Property<int>("CommitteesStatus")
                        .HasColumnType("int");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("GroupNotes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("HasLegalDocument")
                        .HasColumnType("bit");

                    b.Property<string>("LegalDocument")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Missions")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Position")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProjectName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<int>("State")
                        .HasColumnType("int");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("WorkRule")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Committees", (string)null);
                });

            modelBuilder.Entity("Committees.Models.ExternalMember", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CommitteeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("DestinationName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Job")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("PermissionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<int>("State")
                        .HasColumnType("int");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CommitteeId");

                    b.HasIndex("PermissionId");

                    b.ToTable("ExternalMembers", (string)null);
                });

            modelBuilder.Entity("Committees.Models.Meeting", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CommitteeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("HasExpertAssist")
                        .HasColumnType("bit");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("MeetingDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("MeetingStatus")
                        .HasColumnType("int");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("Rules")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("State")
                        .HasColumnType("int");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CommitteeId");

                    b.ToTable("Meetings", (string)null);
                });

            modelBuilder.Entity("Committees.Models.MeetingAttachment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("MeetingId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Path")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<int>("State")
                        .HasColumnType("int");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("MeetingId");

                    b.ToTable("MeetingAttachments", (string)null);
                });

            modelBuilder.Entity("Committees.Models.Proceeding", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CommitteeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Notes")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<int>("State")
                        .HasColumnType("int");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CommitteeId");

                    b.ToTable("Proceedings", (string)null);
                });

            modelBuilder.Entity("Committees.Models.ProceedingAttachment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Path")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("ProceedingId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<int>("State")
                        .HasColumnType("int");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ProceedingId");

                    b.ToTable("ProceedingAttachments", (string)null);
                });

            modelBuilder.Entity("ExternalMemberMeeting", b =>
                {
                    b.Property<Guid>("ExternalMembersId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("MeetingsId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ExternalMembersId", "MeetingsId");

                    b.HasIndex("MeetingsId");

                    b.ToTable("ExternalMemberMeeting", (string)null);
                });

            modelBuilder.Entity("ExternalMemberProceeding", b =>
                {
                    b.Property<Guid>("ExternalMembersId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ProceedingsId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ExternalMembersId", "ProceedingsId");

                    b.HasIndex("ProceedingsId");

                    b.ToTable("ExternalMemberProceeding", (string)null);
                });

            modelBuilder.Entity("MeetingOutput", b =>
                {
                    b.Property<Guid>("MeetingsId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("OutputsId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("MeetingsId", "OutputsId");

                    b.HasIndex("OutputsId");

                    b.ToTable("MeetingOutput", (string)null);
                });

            modelBuilder.Entity("MeetingProceeding", b =>
                {
                    b.Property<Guid>("MeetingsId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ProceedingsId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("MeetingsId", "ProceedingsId");

                    b.HasIndex("ProceedingsId");

                    b.ToTable("MeetingProceeding", (string)null);
                });

            modelBuilder.Entity("CommitteeInternalMember", b =>
                {
                    b.HasOne("Committees.Models.Committee", null)
                        .WithMany()
                        .HasForeignKey("CommitteesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Committees.Domain.Models.InternalMember", null)
                        .WithMany()
                        .HasForeignKey("InternalMembersUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Committees.Domain.Models.CommitteeAttachment", b =>
                {
                    b.HasOne("Committees.Models.Committee", "Committee")
                        .WithMany("Attachments")
                        .HasForeignKey("CommitteeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Committee");
                });

            modelBuilder.Entity("Committees.Domain.Models.InternalMember", b =>
                {
                    b.HasOne("Committees.Domain.Models.Permission", "Permission")
                        .WithMany()
                        .HasForeignKey("PermissionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Permission");
                });

            modelBuilder.Entity("Committees.Domain.Models.InternalMemberMeeting", b =>
                {
                    b.HasOne("Committees.Domain.Models.InternalMember", "InternalMember")
                        .WithMany("InternalMemberMeetings")
                        .HasForeignKey("InternalMemberId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Committees.Models.Meeting", "Meeting")
                        .WithMany("InternalMemberMeetings")
                        .HasForeignKey("MeetingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("InternalMember");

                    b.Navigation("Meeting");
                });

            modelBuilder.Entity("Committees.Domain.Models.InternalMemberProceeding", b =>
                {
                    b.HasOne("Committees.Domain.Models.InternalMember", "InternalMember")
                        .WithMany("InternalMemberProceedings")
                        .HasForeignKey("InternalMemberId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Committees.Models.Proceeding", "Proceeding")
                        .WithMany("InternalMemberProceedings")
                        .HasForeignKey("ProceedingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("InternalMember");

                    b.Navigation("Proceeding");
                });

            modelBuilder.Entity("Committees.Domain.Models.Output", b =>
                {
                    b.HasOne("Committees.Models.Committee", "Committee")
                        .WithMany("Outputs")
                        .HasForeignKey("CommitteeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Committees.Domain.Models.OutputType", "OutputType")
                        .WithMany()
                        .HasForeignKey("OutputTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Committee");

                    b.Navigation("OutputType");
                });

            modelBuilder.Entity("Committees.Domain.Models.OutputAttachment", b =>
                {
                    b.HasOne("Committees.Domain.Models.Output", "Output")
                        .WithMany("OutputAttachments")
                        .HasForeignKey("OutputId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Output");
                });

            modelBuilder.Entity("Committees.Domain.Models.Target", b =>
                {
                    b.HasOne("Committees.Models.Committee", "Committee")
                        .WithMany("Targets")
                        .HasForeignKey("CommitteeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Committee");
                });

            modelBuilder.Entity("Committees.Domain.Models.WorkRule", b =>
                {
                    b.HasOne("Committees.Models.Committee", "Committee")
                        .WithMany("WorkRules")
                        .HasForeignKey("CommitteeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Committee");
                });

            modelBuilder.Entity("Committees.Models.ExternalMember", b =>
                {
                    b.HasOne("Committees.Models.Committee", "Committee")
                        .WithMany("ExternalMembers")
                        .HasForeignKey("CommitteeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Committees.Domain.Models.Permission", "Permission")
                        .WithMany()
                        .HasForeignKey("PermissionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Committee");

                    b.Navigation("Permission");
                });

            modelBuilder.Entity("Committees.Models.Meeting", b =>
                {
                    b.HasOne("Committees.Models.Committee", "Committee")
                        .WithMany("Meetings")
                        .HasForeignKey("CommitteeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Committee");
                });

            modelBuilder.Entity("Committees.Models.MeetingAttachment", b =>
                {
                    b.HasOne("Committees.Models.Meeting", "Meeting")
                        .WithMany("MeetingAttachments")
                        .HasForeignKey("MeetingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Meeting");
                });

            modelBuilder.Entity("Committees.Models.Proceeding", b =>
                {
                    b.HasOne("Committees.Models.Committee", "Committee")
                        .WithMany("Proceedings")
                        .HasForeignKey("CommitteeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Committee");
                });

            modelBuilder.Entity("Committees.Models.ProceedingAttachment", b =>
                {
                    b.HasOne("Committees.Models.Proceeding", "Proceeding")
                        .WithMany("ProceedingAttachments")
                        .HasForeignKey("ProceedingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Proceeding");
                });

            modelBuilder.Entity("ExternalMemberMeeting", b =>
                {
                    b.HasOne("Committees.Models.ExternalMember", null)
                        .WithMany()
                        .HasForeignKey("ExternalMembersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Committees.Models.Meeting", null)
                        .WithMany()
                        .HasForeignKey("MeetingsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ExternalMemberProceeding", b =>
                {
                    b.HasOne("Committees.Models.ExternalMember", null)
                        .WithMany()
                        .HasForeignKey("ExternalMembersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Committees.Models.Proceeding", null)
                        .WithMany()
                        .HasForeignKey("ProceedingsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MeetingOutput", b =>
                {
                    b.HasOne("Committees.Models.Meeting", null)
                        .WithMany()
                        .HasForeignKey("MeetingsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Committees.Domain.Models.Output", null)
                        .WithMany()
                        .HasForeignKey("OutputsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MeetingProceeding", b =>
                {
                    b.HasOne("Committees.Models.Meeting", null)
                        .WithMany()
                        .HasForeignKey("MeetingsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Committees.Models.Proceeding", null)
                        .WithMany()
                        .HasForeignKey("ProceedingsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Committees.Domain.Models.InternalMember", b =>
                {
                    b.Navigation("InternalMemberMeetings");

                    b.Navigation("InternalMemberProceedings");
                });

            modelBuilder.Entity("Committees.Domain.Models.Output", b =>
                {
                    b.Navigation("OutputAttachments");
                });

            modelBuilder.Entity("Committees.Models.Committee", b =>
                {
                    b.Navigation("Attachments");

                    b.Navigation("ExternalMembers");

                    b.Navigation("Meetings");

                    b.Navigation("Outputs");

                    b.Navigation("Proceedings");

                    b.Navigation("Targets");

                    b.Navigation("WorkRules");
                });

            modelBuilder.Entity("Committees.Models.Meeting", b =>
                {
                    b.Navigation("InternalMemberMeetings");

                    b.Navigation("MeetingAttachments");
                });

            modelBuilder.Entity("Committees.Models.Proceeding", b =>
                {
                    b.Navigation("InternalMemberProceedings");

                    b.Navigation("ProceedingAttachments");
                });
#pragma warning restore 612, 618
        }
    }
}
